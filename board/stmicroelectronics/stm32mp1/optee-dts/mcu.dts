// SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-3-Clause)
/*
 * Copyright (C) 2024, STMicroelectronics - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/* For more information on Device Tree configuration, please refer to
 * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
 */

 /dts-v1/;
 #include <dt-bindings/pinctrl/stm32-pinfunc.h>
 #include <dt-bindings/clock/stm32mp1-clksrc.h>
 #include <dt-bindings/soc/stm32mp15-etzpc.h>
 
 #include "stm32mp151.dtsi"
 #include "stm32mp15xa.dtsi"
 #include "stm32mp15xxac-pinctrl.dtsi"
 
 /* USER CODE BEGIN includes */
 #include <dt-bindings/power/stm32mp1-power.h>
 #include <dt-bindings/random/stm32mp-rng.h>
 /* USER CODE END includes */
 
 / {
     model = "STMicroelectronics custom STM32CubeMX board - openstlinux-6.1-yocto-mickledore-mp1-v23.06.21";
     compatible = "st,stm32mp151a-mcu-xx-mx", "st,stm32mp151";
 
     memory@c0000000 {
         device_type = "memory";
         reg = <0xc0000000 0x10000000>;
 
         /* USER CODE BEGIN memory */
         /* USER CODE END memory */
     };
 
     reserved-memory {
         #address-cells = <1>;
         #size-cells = <1>;
         ranges;
 
         /* USER CODE BEGIN reserved-memory */
         /* USER CODE END reserved-memory */
     };
 
     /* USER CODE BEGIN root */
     aliases {
     	serial0 = &usart1;
     };
 
     chosen {
     	stdout-path = "serial0:115200n8";
     };
 
     vin: vin {
         compatible = "regulator-fixed";
         regulator-name = "vin";
         regulator-min-microvolt = <5000000>;
         regulator-max-microvolt = <5000000>;
         regulator-always-on;
     };
     /* USER CODE END root */
 
     clocks {
         /* USER CODE BEGIN clocks */
         /* USER CODE END clocks */
 
         clk_hsi: clk-hsi {
             clock-frequency = <64000000>;
 
             /* USER CODE BEGIN clk_hsi */
             /* USER CODE END clk_hsi */
         };
         clk_lse: clk-lse {
             clock-frequency = <32768>;
             st,drive = < LSEDRV_MEDIUM_HIGH >;
 
             /* USER CODE BEGIN clk_lse */
             /* USER CODE END clk_lse */
         };
         clk_hse: clk-hse {
             clock-frequency = <24000000>;
             st,digbypass;
 
             /* USER CODE BEGIN clk_hse */
             /* USER CODE END clk_hse */
         };
     };
 
 }; /*root*/
 
 /*Warning: the configuration of the secured GPIOs should be added in (addons) User Section*/
 &pinctrl {
     /* USER CODE BEGIN pinctrl */
    usart1_pins_mx: usart1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 2, AF4)>; /* USART1_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 11, AF4)>; /* USART1_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

     /* USER CODE END pinctrl */
 };
 
 &pinctrl_z {
     i2c4_pins_z_mx: i2c4_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('Z', 4, AF6)>, /* I2C4_SCL */
                      <STM32_PINMUX('Z', 5, AF6)>; /* I2C4_SDA */
             bias-disable;
             drive-open-drain;
             slew-rate = <0>;
         };
     };
 
     /* USER CODE BEGIN pinctrl_z */
     /* USER CODE END pinctrl_z */
 };
 
 &bsec{
     status = "okay";
 
     /* USER CODE BEGIN bsec */
     board_id: board_id@ec {
         reg = <0xec 0x4>;
         st,non-secure-otp;
     };
     /* USER CODE END bsec */
 };
 
 &etzpc{
     status = "okay";
     st,decprot = <
     /*"Non Secured" peripherals*/
     DECPROT(STM32MP1_ETZPC_ADC_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_DMA1_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_DMAMUX_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_ETH_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_FMC_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_HASH1_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_I2C4_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_I2C5_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_SDMMC3_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_DLYBSD3_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_SPI2_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_SPI4_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_SPI5_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_TIM8_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_OTG_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_VREFBUF_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     /*"NS_R S_W" peripherals*/
     DECPROT(STM32MP1_ETZPC_DDRCTRL_ID, DECPROT_NS_R_S_W, DECPROT_LOCK)
     DECPROT(STM32MP1_ETZPC_DDRPHYC_ID, DECPROT_NS_R_S_W, DECPROT_LOCK)
     /*"Secured" peripherals*/
     DECPROT(STM32MP1_ETZPC_RNG1_ID, DECPROT_S_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_STGENC_ID, DECPROT_S_RW, DECPROT_UNLOCK)
     /*"Mcu Isolation" peripherals*/
     DECPROT(STM32MP1_ETZPC_DMA2_ID, DECPROT_MCU_ISOLATION, DECPROT_UNLOCK)
 
     /*Restriction: following IDs are not managed  - please to use User-Section if needed:
           STM32MP1_ETZPC_SRAMx_ID  STM32MP1_ETZPC_RETRAM_ID  STM32MP1_ETZPC_BKPSRAM_ID*/
 
     /* USER CODE BEGIN etzpc_decprot */
         /*STM32CubeMX generates a basic and standard configuration for ETZPC.
         Additional device configurations can be added here if needed.
         "etzpc" node could be also overloaded in "addons" User-Section.*/
     /*"Non Secured" peripherals*/
     DECPROT(STM32MP1_ETZPC_UART4_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_UART7_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_UART8_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_USART1_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
     DECPROT(STM32MP1_ETZPC_USART6_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
 
     /*"Mcu Isolation" peripherals*/
     DECPROT(STM32MP1_ETZPC_SPI1_ID, DECPROT_MCU_ISOLATION, DECPROT_UNLOCK)
     /* USER CODE END etzpc_decprot */
     >;
 
     /* USER CODE BEGIN etzpc */
     /* USER CODE END etzpc */
 };
 
 &i2c4{
     pinctrl-names = "default";
     pinctrl-0 = <&i2c4_pins_z_mx>;
     status = "okay";
 
     /* USER CODE BEGIN i2c4 */
     compatible = "st,stm32mp15-i2c-non-secure";
     i2c-scl-rising-time-ns = <185>;
     i2c-scl-falling-time-ns = <20>;
     clock-frequency = <400000>;
     /delete-property/dmas;
     /delete-property/dma-names;
 
     pmic: stpmic@33 {
         compatible = "st,stpmic1";
         reg = <0x33>;
         interrupts-extended = <&exti 55 IRQ_TYPE_EDGE_FALLING>;
         interrupt-controller;
         #interrupt-cells = <2>;
         status = "okay";
 
         regulators {
             compatible = "st,stpmic1-regulators";
             buck1-supply = <&vin>;
             buck2-supply = <&vin>;
             buck3-supply = <&vin>;
             buck4-supply = <&vin>;
             ldo1-supply = <&v3v3>;
             ldo2-supply = <&vin>;
             ldo3-supply = <&vdd_ddr>;
             ldo4-supply = <&vin>;
             ldo5-supply = <&vin>;
             ldo6-supply = <&v3v3>;
             vref_ddr-supply = <&vin>;
             boost-supply = <&vin>;
             pwr_sw1-supply = <&bst_out>;
             pwr_sw2-supply = <&bst_out>;
 
             vddcore: buck1 {
                 regulator-name = "vddcore"; //to cpu
                 regulator-min-microvolt = <1200000>;
                 regulator-max-microvolt = <1350000>;
                 regulator-always-on;
                 regulator-initial-mode = <0>;
                 regulator-over-current-protection;
             };
 
             vdd_ddr: buck2 {
                 regulator-name = "vdd_ddr";//to ddr
                 regulator-min-microvolt = <1350000>;
                 regulator-max-microvolt = <1350000>;
                 regulator-always-on;
                 regulator-initial-mode = <0>;
                 regulator-over-current-protection;
             };
 
             vdd: buck3 {
                 regulator-name = "vdd";//to mmc
                 regulator-min-microvolt = <3300000>;
                 regulator-max-microvolt = <3300000>;
                 regulator-always-on;
                 st,mask-reset;
                 regulator-initial-mode = <0>;
                 regulator-over-current-protection;
             };
 
             v3v3: buck4 {
                 regulator-name = "v3v3";//to mmc
                 regulator-min-microvolt = <3300000>;
                 regulator-max-microvolt = <3300000>;
                 regulator-always-on;
                 regulator-over-current-protection;
                 regulator-initial-mode = <0>;
             };
 
             vdda: ldo1 {
                 regulator-name = "vdda";//to verf
                 regulator-min-microvolt = <1700000>;
                 regulator-max-microvolt = <3300000>;
                 regulator-always-on;
             };
 
             vldo2: ldo2 {
                 regulator-name = "vldo2";
                 regulator-min-microvolt = <1700000>;
                 regulator-max-microvolt = <3300000>;
                 regulator-always-on;
             };
 
             vtt_ddr: ldo3 {
                 regulator-name = "vtt_ddr";
                 regulator-always-on;
                 regulator-over-current-protection;
                 st,regulator-sink-source;
             };
 
             vdd_usb: ldo4 {
                 regulator-name = "vdd_usb";//to usb
                 regulator-min-microvolt = <3300000>;
                 regulator-max-microvolt = <3300000>;
                 regulator-always-on;
             };
 
             vdd_sd: ldo5 {
                 regulator-name = "vdd_sd";
                 regulator-min-microvolt = <3300000>;
                 regulator-max-microvolt = <3300000>;
                 regulator-boot-on;
             };
             
             vldo6: ldo6 {
                 regulator-name = "vldo6";
                 regulator-min-microvolt = <900000>;
                 regulator-max-microvolt = <3300000>;
                 regulator-always-on;
             };
 
             vref_ddr: vref_ddr {
                 regulator-name = "vref_ddr";
                 regulator-always-on;
             };
 
             bst_out: boost {
                 regulator-name = "bst_out";
             };
 
             vbus_otg: pwr_sw1 {
                 regulator-name = "vbus_otg";
             };
 
             vbus_sw: pwr_sw2 {
                 regulator-name = "vbus_sw";
                 regulator-active-discharge = <1>;
             };
         };
     };
     /* USER CODE END i2c4 */
 };

// &iwdg1{
// 	status = "okay";

// 	/* USER CODE BEGIN iwdg1 */
// 	timeout-sec = <32>;
// 	/* USER CODE END iwdg1 */
// };
 
 &rcc{
     status = "okay";
 
     /* USER CODE BEGIN rcc */
     /* USER CODE END rcc */
 
     st,clksrc = <
         CLK_CKPER_HSE
         CLK_FMC_ACLK
         CLK_ETH_DISABLED
         CLK_SDMMC12_PLL4P
         CLK_STGEN_HSE
         CLK_SPI2S1_PLL3Q
         CLK_SPI2S23_PLL3Q
         CLK_SPI45_HSI
         CLK_I2C46_HSI
         CLK_SDMMC3_PLL4P
         CLK_USBO_USBPHY
         CLK_ADC_CKPER
         CLK_I2C35_PCLK1
         CLK_UART1_HSI
         CLK_UART24_HSI
         CLK_UART6_HSI
         CLK_UART78_HSI
         CLK_RNG1_LSI
         CLK_MPU_PLL1P
         CLK_AXI_PLL2P
         CLK_MCU_PLL3P
         CLK_RTC_LSE
         CLK_MCO1_DISABLED
         CLK_MCO2_DISABLED
     >;
     st,clkdiv = <
         DIV(DIV_MPU, 1)
         DIV(DIV_AXI, 0)
         DIV(DIV_MCU, 0)
         DIV(DIV_APB1, 1)
         DIV(DIV_APB2, 1)
         DIV(DIV_APB3, 1)
         DIV(DIV_APB4, 1)
         DIV(DIV_APB5, 2)
         DIV(DIV_RTC, 23)
         DIV(DIV_MCO1, 0)
         DIV(DIV_MCO2, 0)
     >;
     st,pll_vco {
         pll2_vco_1066Mhz: pll2-vco-1066Mhz {
             src = < CLK_PLL12_HSE >;
             divmn = < 2 65 >;
             frac = < 0x1400 >;
         };
         pll3_vco_417Mhz: pll3-vco-417Mhz {
             src = < CLK_PLL3_HSE >;
             divmn = < 1 33 >;
             frac = < 0x1a04 >;
         };
         pll4_vco_594Mhz: pll4-vco-594Mhz {
             src = < CLK_PLL4_HSE >;
             divmn = < 3 98 >;
         };
         /* USER CODE BEGIN rcc_st-pll_vco */
         /* USER CODE END rcc_st-pll_vco */
     };
 
     pll2:st,pll@1 {
         compatible = "st,stm32mp1-pll";
         reg = <1>;
 
         st,pll = < &pll2_cfg1 >;
 
         pll2_cfg1: pll2_cfg1 {
             st,pll_vco = < &pll2_vco_1066Mhz >;
             st,pll_div_pqr = < 1 1 0 >;
         };
         /* USER CODE BEGIN pll2 */
         /* USER CODE END pll2 */
     };
 
     pll3:st,pll@2 {
         compatible = "st,stm32mp1-pll";
         reg = <2>;
 
         st,pll = < &pll3_cfg1 >;
 
         pll3_cfg1: pll3_cfg1 {
             st,pll_vco = < &pll3_vco_417Mhz >;
             st,pll_div_pqr = < 1 12 36 >;
         };
         /* USER CODE BEGIN pll3 */
         /* USER CODE END pll3 */
     };
 
     pll4:st,pll@3 {
         compatible = "st,stm32mp1-pll";
         reg = <3>;
 
         st,pll = < &pll4_cfg1 >;
 
         pll4_cfg1: pll4_cfg1 {
             st,pll_vco = < &pll4_vco_594Mhz >;
             st,pll_div_pqr = < 5 7 7 >;
         };
         /* USER CODE BEGIN pll4 */
         /* USER CODE END pll4 */
     };
 
 };
 
 &rng1{
     status = "okay";
 
     /* USER CODE BEGIN rng1 */
     /* USER CODE END rng1 */
 };
 
 &rtc{
     status = "okay";
 
     /* USER CODE BEGIN rtc */
     /* USER CODE END rtc */
 };
 
 &tamp{
     status = "okay";
 
     /* USER CODE BEGIN tamp */
     /* USER CODE END tamp */
 };
 
 /* USER CODE BEGIN addons */
 &cpu0 {
     cpu-supply = <&vddcore>;
 };
 
 &pwr_regulators {
     vdd-supply = <&vdd>;
     vdd_3v3_usbfs-supply = <&vdd_usb>;
 };

 &usart1{
	pinctrl-names = "default";
	pinctrl-0 = <&usart1_pins_mx>;
	status = "okay";
};
 /* USER CODE END addons */
 