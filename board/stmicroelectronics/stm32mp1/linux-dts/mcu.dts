// SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-3-Clause)
/*
 * Copyright (C) 2024, STMicroelectronics - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/* For more information on Device Tree configuration, please refer to
 * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
 */

 /dts-v1/;
 #include <dt-bindings/pinctrl/stm32-pinfunc.h>
 
 #include "stm32mp151.dtsi"
 #include "stm32mp15xa.dtsi"
 #include "stm32mp15xxac-pinctrl.dtsi"
 #include "stm32mp15-m4-srm.dtsi"
 
 /* USER CODE BEGIN includes */
 #include <dt-bindings/mfd/st,stpmic1.h>
 #include "mcu-scmi.dtsi"
 #include <dt-bindings/leds/common.h>
 /* USER CODE END includes */
 
 / {
    model = "STMicroelectronics custom STM32CubeMX board - openstlinux-6.1-yocto-mickledore-mp1-v23.06.21";
    compatible = "st,stm32mp151a-mcu-xx-mx", "st,stm32mp151";

    memory@c0000000 {
        device_type = "memory";
        reg = <0xc0000000 0x10000000>;

        /* USER CODE BEGIN memory */
        /* USER CODE END memory */
    };

    aliases {
		ethernet0 = &ethernet0;
		serial0 = &usart1; //debug
		serial1 = &uart7; 
		serial2 = &uart4;
	};

	chosen {
		stdout-path = "serial0:115200n8";
	};

	led {
		compatible = "gpio-leds";

		board_status {
			gpios = <&gpiof 10 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "timer";
			led-pattern = <50 50>;
		};

		app_status {
			gpios = <&gpiof 12 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "default-on";
			default-state = "on";
		};

		intf1g {
			gpios = <&gpiof 13 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "default-on";
			default-state = "on";
		};

		intf1y {
			gpios = <&gpioi 11 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "default-on";
			default-state = "on";
		};

		intf2g {
			gpios = <&gpioi 8 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "default-on";
			default-state = "on";
		};

		intf2y {
			gpios = <&gpiof 9 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "default-on";
			default-state = "on";
		};
	};
 
     reserved-memory {
         #address-cells = <1>;
         #size-cells = <1>;
         ranges;
 
         /* USER CODE BEGIN reserved-memory */
         mcuram2: mcuram2@10000000 {
             compatible = "shared-dma-pool";
             reg = <0x10000000 0x56000>;
             no-map;
         };
 
         vdev0vring0: vdev0vring0@10056000 {
             compatible = "shared-dma-pool";
             reg = <0x10056000 0x1000>;
             no-map;
         };
 
         vdev0vring1: vdev0vring1@10057000 {
             compatible = "shared-dma-pool";
             reg = <0x10057000 0x1000>;
             no-map;
         };
 
         vdev0buffer: vdev0buffer@10058000 {
             compatible = "shared-dma-pool";
             reg = <0x10058000 0x8000>;
             no-map;
         };
 
         mcuram: mcuram@30000000 {
             compatible = "shared-dma-pool";
             reg = <0x30000000 0x56000>;
             no-map;
         };
 
         retram: retram@38000000 {
             compatible = "shared-dma-pool";
             reg = <0x38000000 0x10000>;
             no-map;
         };
         /* USER CODE END reserved-memory */
     };
 
     /* USER CODE BEGIN root */
     usb_phy_tuning: usb-phy-tuning {
         st,hs-dc-level = <2>;
         st,fs-rftime-tuning;
         st,hs-rftime-reduction;
         st,hs-current-trim = <15>;
         st,hs-impedance-trim = <1>;
         st,squelch-level = <3>;
         st,hs-rx-offset = <2>;
         st,no-lsfs-sc;
     };
 
     vin: vin {
         compatible = "regulator-fixed";
         regulator-name = "vin";
         regulator-min-microvolt = <5000000>;
         regulator-max-microvolt = <5000000>;
         regulator-always-on;
     };
 
     clk_mcp: clk_mcp {
         compatible = "pwm-clock";
         #clock-cells = <0>;
         clock-frequency = <16000000>;
         pwms = <&pwm3 2 63 0>; /* 1 / 62.5 ns = 16 MHz */
         status = "okay";
     };
 
     led {
         compatible = "gpio-leds";
 
         board_status {
             gpios = <&gpiof 10 GPIO_ACTIVE_HIGH>;
             linux,default-trigger = "timer";
             led-pattern = <50 50>;
         };
 
         app_status {
             gpios = <&gpiof 12 GPIO_ACTIVE_HIGH>;
             linux,default-trigger = "timer";
             led-pattern = <50 50>;
         };
 
         intf1g {
             gpios = <&gpiof 13 GPIO_ACTIVE_HIGH>;
             linux,default-trigger = "timer";
             led-pattern = <50 50>;
         };
 
         intf1y {
             gpios = <&gpioi 11 GPIO_ACTIVE_HIGH>;
             linux,default-trigger = "timer";
             led-pattern = <50 50>;
         };
 
         intf2g {
             gpios = <&gpioi 8 GPIO_ACTIVE_HIGH>;
             linux,default-trigger = "timer";
             led-pattern = <50 50>;
         };
 
         intf2y {
             gpios = <&gpiof 9 GPIO_ACTIVE_HIGH>;
             linux,default-trigger = "timer";
             led-pattern = <50 50>;
         };
     };
     /* USER CODE END root */
 
     clocks{
 
         /* USER CODE BEGIN clocks */
         /* USER CODE END clocks */
     };
 
 }; /*root*/
 
 &pinctrl {
    uart4_pins_mx: uart4_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 8, AF8)>; /* UART4_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('B', 9, AF8)>; /* UART4_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart4_idle_pins_mx: uart4_idle_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 8, AF8)>; /* UART4_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('B', 9, ANALOG)>; /* UART4_TX */
		};
	};

	uart4_sleep_pins_mx: uart4_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 8, ANALOG)>, /* UART4_RX */
					 <STM32_PINMUX('B', 9, ANALOG)>; /* UART4_TX */
		};
	};

	usart1_pins_mx: usart1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 2, AF4)>; /* USART1_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 11, AF4)>; /* USART1_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	usart1_idle_pins_mx: usart1_idle_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 2, AF4)>; /* USART1_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 11, ANALOG)>; /* USART1_TX */
		};
	};

	usart1_sleep_pins_mx: usart1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 2, ANALOG)>, /* USART1_RX */
					 <STM32_PINMUX('G', 11, ANALOG)>; /* USART1_TX */
		};
	};

	uart7_pins_mx: uart7_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('F', 6, AF7)>; /* UART7_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('F', 7, AF7)>; /* UART7_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart7_idle_pins_mx: uart7_idle_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('F', 6, AF7)>; /* UART7_RX */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('F', 7, ANALOG)>; /* UART7_TX */
		};
	};

	uart7_sleep_pins_mx: uart7_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 6, ANALOG)>, /* UART7_RX */
					 <STM32_PINMUX('F', 7, ANALOG)>; /* UART7_TX */
		};
	};

	m4_spi1_pins_mx: m4_spi1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 15, RSVD)>; /* SPI1_NSS */
		};
    };
 
     adc_pins_mx: adc_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('A', 3, ANALOG)>, /* ADC1_INP15 */
                      <STM32_PINMUX('A', 5, ANALOG)>; /* ADC1_INP19 */
         };
     };
 
     adc_sleep_pins_mx: adc_sleep_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('A', 3, ANALOG)>, /* ADC1_INP15 */
                      <STM32_PINMUX('A', 5, ANALOG)>; /* ADC1_INP19 */
         };
     };
 
     eth1_pins_mx: eth1_mx-0 {
         pins1 {
             pinmux = <STM32_PINMUX('A', 1, AF11)>, /* ETH1_RX_CLK */
                      <STM32_PINMUX('A', 7, AF11)>, /* ETH1_RX_DV */
                      <STM32_PINMUX('B', 1, AF11)>, /* ETH1_RXD3 */
                      <STM32_PINMUX('C', 3, AF11)>, /* ETH1_TX_CLK */
                      <STM32_PINMUX('H', 2, AF11)>, /* ETH1_CRS */
                      <STM32_PINMUX('H', 3, AF11)>, /* ETH1_COL */
                      <STM32_PINMUX('I', 10, AF11)>; /* ETH1_RX_ER */
             bias-disable;
         };
         pins2 {
             pinmux = <STM32_PINMUX('A', 2, AF11)>; /* ETH1_MDIO */
             bias-disable;
             drive-push-pull;
             slew-rate = <0>;
         };
         pins3 {
             pinmux = <STM32_PINMUX('B', 0, AF11)>, /* ETH1_RXD2 */
                      <STM32_PINMUX('C', 4, AF11)>; /* ETH1_RXD0 */
             bias-pull-down;
         };
         pins4 {
             pinmux = <STM32_PINMUX('B', 11, AF11)>, /* ETH1_TX_EN */
                      <STM32_PINMUX('C', 1, AF11)>, /* ETH1_MDC */
                      <STM32_PINMUX('C', 2, AF11)>, /* ETH1_TXD2 */
                      <STM32_PINMUX('E', 2, AF11)>, /* ETH1_TXD3 */
                      <STM32_PINMUX('G', 13, AF11)>, /* ETH1_TXD0 */
                      <STM32_PINMUX('G', 14, AF11)>; /* ETH1_TXD1 */
             bias-disable;
             drive-push-pull;
             slew-rate = <1>;
         };
         pins5 {
             pinmux = <STM32_PINMUX('C', 5, AF11)>; /* ETH1_RXD1 */
             bias-pull-up;
         };
     };
 
     eth1_sleep_pins_mx: eth1_sleep_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_RX_CLK */
                      <STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO */
                      <STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_RX_DV */
                      <STM32_PINMUX('B', 0, ANALOG)>, /* ETH1_RXD2 */
                      <STM32_PINMUX('B', 1, ANALOG)>, /* ETH1_RXD3 */
                      <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_EN */
                      <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_MDC */
                      <STM32_PINMUX('C', 2, ANALOG)>, /* ETH1_TXD2 */
                      <STM32_PINMUX('C', 3, ANALOG)>, /* ETH1_TX_CLK */
                      <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
                      <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
                      <STM32_PINMUX('E', 2, ANALOG)>, /* ETH1_TXD3 */
                      <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
                      <STM32_PINMUX('G', 14, ANALOG)>, /* ETH1_TXD1 */
                      <STM32_PINMUX('H', 2, ANALOG)>, /* ETH1_CRS */
                      <STM32_PINMUX('H', 3, ANALOG)>, /* ETH1_COL */
                      <STM32_PINMUX('I', 10, ANALOG)>; /* ETH1_RX_ER */
         };
     };
 
     fmc_pins_mx: fmc_mx-0 {
         pins1 {
             pinmux = <STM32_PINMUX('D', 0, AF12)>, /* FMC_D2 */
                      <STM32_PINMUX('D', 1, AF12)>, /* FMC_D3 */
                      <STM32_PINMUX('D', 4, AF12)>, /* FMC_NOE */
                      <STM32_PINMUX('D', 5, AF12)>, /* FMC_NWE */
                      <STM32_PINMUX('D', 11, AF12)>, /* FMC_CLE */
                      <STM32_PINMUX('D', 12, AF12)>, /* FMC_ALE */
                      <STM32_PINMUX('D', 14, AF12)>, /* FMC_D0 */
                      <STM32_PINMUX('D', 15, AF12)>, /* FMC_D1 */
                      <STM32_PINMUX('E', 7, AF12)>, /* FMC_D4 */
                      <STM32_PINMUX('E', 8, AF12)>, /* FMC_D5 */
                      <STM32_PINMUX('E', 9, AF12)>, /* FMC_D6 */
                      <STM32_PINMUX('E', 10, AF12)>, /* FMC_D7 */
                      <STM32_PINMUX('G', 9, AF12)>; /* FMC_NCE */
             bias-disable;
             drive-push-pull;
             slew-rate = <1>;
         };
         pins2 {
             pinmux = <STM32_PINMUX('D', 6, AF12)>; /* FMC_NWAIT */
             bias-pull-up;
         };
     };
 
     fmc_sleep_pins_mx: fmc_sleep_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('D', 0, ANALOG)>, /* FMC_D2 */
                      <STM32_PINMUX('D', 1, ANALOG)>, /* FMC_D3 */
                      <STM32_PINMUX('D', 4, ANALOG)>, /* FMC_NOE */
                      <STM32_PINMUX('D', 5, ANALOG)>, /* FMC_NWE */
                      <STM32_PINMUX('D', 6, ANALOG)>, /* FMC_NWAIT */
                      <STM32_PINMUX('D', 11, ANALOG)>, /* FMC_CLE */
                      <STM32_PINMUX('D', 12, ANALOG)>, /* FMC_ALE */
                      <STM32_PINMUX('D', 14, ANALOG)>, /* FMC_D0 */
                      <STM32_PINMUX('D', 15, ANALOG)>, /* FMC_D1 */
                      <STM32_PINMUX('E', 7, ANALOG)>, /* FMC_D4 */
                      <STM32_PINMUX('E', 8, ANALOG)>, /* FMC_D5 */
                      <STM32_PINMUX('E', 9, ANALOG)>, /* FMC_D6 */
                      <STM32_PINMUX('E', 10, ANALOG)>, /* FMC_D7 */
                      <STM32_PINMUX('G', 9, ANALOG)>; /* FMC_NCE */
         };
     };
 
     i2c5_pins_mx: i2c5_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('A', 11, AF4)>, /* I2C5_SCL */
                      <STM32_PINMUX('A', 12, AF4)>; /* I2C5_SDA */
             bias-disable;
             drive-open-drain;
             slew-rate = <0>;
         };
     };
 
     i2c5_sleep_pins_mx: i2c5_sleep_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('A', 11, ANALOG)>, /* I2C5_SCL */
                      <STM32_PINMUX('A', 12, ANALOG)>; /* I2C5_SDA */
         };
     };
 
     sdmmc1_pins_mx: sdmmc1_mx-0 {
         pins1 {
             pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
                      <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
                      <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
                      <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
                      <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
             bias-pull-up;
             drive-push-pull;
             slew-rate = <1>;
         };
         pins2 {
             pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
             bias-disable;
             drive-push-pull;
             slew-rate = <3>;
         };
     };
 
     sdmmc1_opendrain_pins_mx: sdmmc1_opendrain_mx-0 {
         pins1 {
             pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
                      <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
                      <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
                      <STM32_PINMUX('C', 11, AF12)>; /* SDMMC1_D3 */
             bias-pull-up;
             drive-push-pull;
             slew-rate = <1>;
         };
         pins2 {
             pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
             bias-disable;
             drive-push-pull;
             slew-rate = <3>;
         };
         pins3 {
             pinmux = <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
             bias-pull-up;
             drive-open-drain;
             slew-rate = <1>;
         };
     };
 
     sdmmc1_sleep_pins_mx: sdmmc1_sleep_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
                      <STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
                      <STM32_PINMUX('C', 10, ANALOG)>, /* SDMMC1_D2 */
                      <STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
                      <STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
                      <STM32_PINMUX('D', 2, ANALOG)>; /* SDMMC1_CMD */
         };
     };
 
     sdmmc3_pins_mx: sdmmc3_mx-0 {
         pins1 {
             pinmux = <STM32_PINMUX('D', 7, AF10)>, /* SDMMC3_D3 */
                      <STM32_PINMUX('F', 0, AF9)>, /* SDMMC3_D0 */
                      <STM32_PINMUX('F', 1, AF9)>, /* SDMMC3_CMD */
                      <STM32_PINMUX('F', 4, AF9)>, /* SDMMC3_D1 */
                      <STM32_PINMUX('F', 5, AF9)>; /* SDMMC3_D2 */
             bias-pull-up;
             drive-push-pull;
             slew-rate = <1>;
         };
         pins2 {
             pinmux = <STM32_PINMUX('G', 15, AF10)>; /* SDMMC3_CK */
             bias-disable;
             drive-push-pull;
             slew-rate = <3>;
         };
     };
 
     sdmmc3_opendrain_pins_mx: sdmmc3_opendrain_mx-0 {
         pins1 {
             pinmux = <STM32_PINMUX('D', 7, AF10)>, /* SDMMC3_D3 */
                      <STM32_PINMUX('F', 0, AF9)>, /* SDMMC3_D0 */
                      <STM32_PINMUX('F', 4, AF9)>, /* SDMMC3_D1 */
                      <STM32_PINMUX('F', 5, AF9)>; /* SDMMC3_D2 */
             bias-pull-up;
             drive-push-pull;
             slew-rate = <1>;
         };
         pins2 {
             pinmux = <STM32_PINMUX('F', 1, AF9)>; /* SDMMC3_CMD */
             bias-pull-up;
             drive-open-drain;
             slew-rate = <1>;
         };
         pins3 {
             pinmux = <STM32_PINMUX('G', 15, AF10)>; /* SDMMC3_CK */
             bias-disable;
             drive-push-pull;
             slew-rate = <3>;
         };
     };
 
     sdmmc3_sleep_pins_mx: sdmmc3_sleep_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('D', 7, ANALOG)>, /* SDMMC3_D3 */
                      <STM32_PINMUX('F', 0, ANALOG)>, /* SDMMC3_D0 */
                      <STM32_PINMUX('F', 1, ANALOG)>, /* SDMMC3_CMD */
                      <STM32_PINMUX('F', 4, ANALOG)>, /* SDMMC3_D1 */
                      <STM32_PINMUX('F', 5, ANALOG)>, /* SDMMC3_D2 */
                      <STM32_PINMUX('G', 15, ANALOG)>; /* SDMMC3_CK */
         };
     };
 
     spi2_pins_mx: spi2_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('I', 1, AF5)>, /* SPI2_SCK */
                      <STM32_PINMUX('I', 2, AF5)>, /* SPI2_MISO */
                      <STM32_PINMUX('I', 3, AF5)>; /* SPI2_MOSI */
             bias-disable;
             drive-push-pull;
             slew-rate = <1>;
         };
     };
 
     spi2_sleep_pins_mx: spi2_sleep_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('I', 1, ANALOG)>, /* SPI2_SCK */
                      <STM32_PINMUX('I', 2, ANALOG)>, /* SPI2_MISO */
                      <STM32_PINMUX('I', 3, ANALOG)>; /* SPI2_MOSI */
         };
     };
 
     spi4_pins_mx: spi4_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('E', 12, AF5)>, /* SPI4_SCK */
                      <STM32_PINMUX('E', 13, AF5)>, /* SPI4_MISO */
                      <STM32_PINMUX('E', 14, AF5)>; /* SPI4_MOSI */
             bias-disable;
             drive-push-pull;
             slew-rate = <1>;
         };
     };
 
     spi4_sleep_pins_mx: spi4_sleep_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('E', 12, ANALOG)>, /* SPI4_SCK */
                      <STM32_PINMUX('E', 13, ANALOG)>, /* SPI4_MISO */
                      <STM32_PINMUX('E', 14, ANALOG)>; /* SPI4_MOSI */
         };
     };
 
     spi5_pins_mx: spi5_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('F', 11, AF5)>, /* SPI5_MOSI */
                      <STM32_PINMUX('H', 6, AF5)>, /* SPI5_SCK */
                      <STM32_PINMUX('H', 7, AF5)>; /* SPI5_MISO */
             bias-disable;
             drive-push-pull;
             slew-rate = <1>;
         };
     };
 
     spi5_sleep_pins_mx: spi5_sleep_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('F', 11, ANALOG)>, /* SPI5_MOSI */
                      <STM32_PINMUX('H', 6, ANALOG)>, /* SPI5_SCK */
                      <STM32_PINMUX('H', 7, ANALOG)>; /* SPI5_MISO */
         };
     };
 
     tim8_pwm_pins_mx: tim8_pwm_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('H', 15, AF3)>; /* TIM8_CH3N */
             bias-disable;
             drive-push-pull;
             slew-rate = <0>;
         };
     };
 
     tim8_pwm_sleep_pins_mx: tim8_pwm_sleep_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('H', 15, ANALOG)>; /* TIM8_CH3N */
         };
     };
 
     /* USER CODE BEGIN pinctrl */
     /* USER CODE END pinctrl */
 };
 
 &pinctrl_z {
 
     i2c4_pins_z_mx: i2c4_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('Z', 4, AF6)>, /* I2C4_SCL */
                      <STM32_PINMUX('Z', 5, AF6)>; /* I2C4_SDA */
             bias-disable;
             drive-open-drain;
             slew-rate = <0>;
         };
     };
 
     i2c4_sleep_pins_z_mx: i2c4_sleep_mx-0 {
         pins {
             pinmux = <STM32_PINMUX('Z', 4, ANALOG)>, /* I2C4_SCL */
                      <STM32_PINMUX('Z', 5, ANALOG)>; /* I2C4_SDA */
         };
     };

    m4_spi1_pins_z_mx: m4_spi1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('Z', 0, RSVD)>, /* SPI1_SCK */
					 <STM32_PINMUX('Z', 1, RSVD)>, /* SPI1_MISO */
					 <STM32_PINMUX('Z', 2, RSVD)>; /* SPI1_MOSI */
		};
	};

     /* USER CODE BEGIN pinctrl_z */
     /* USER CODE END pinctrl_z */
 };

 &m4_spi1{
	pinctrl-names = "default";
	pinctrl-0 = <&m4_spi1_pins_mx &m4_spi1_pins_z_mx>;
	status = "okay";

	/* USER CODE BEGIN m4_spi1 */
	/* USER CODE END m4_spi1 */
};

&m4_rproc{
	m4_system_resources{
		status = "okay";
	};
};

&uart7{
	pinctrl-names = "default", "idle", "sleep";
	pinctrl-0 = <&uart7_pins_mx>;
	pinctrl-1 = <&uart7_idle_pins_mx>;
	pinctrl-2 = <&uart7_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart7 */
	/* USER CODE END uart7 */
};

&uart4{
	pinctrl-names = "default", "idle", "sleep";
	pinctrl-0 = <&uart4_pins_mx>;
	pinctrl-1 = <&uart4_idle_pins_mx>;
	pinctrl-2 = <&uart4_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart4 */
	/* USER CODE END uart4 */
};

&usart1{
	pinctrl-names = "default", "idle", "sleep";
	pinctrl-0 = <&usart1_pins_mx>;
	pinctrl-1 = <&usart1_idle_pins_mx>;
	pinctrl-2 = <&usart1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN usart1 */
	/* USER CODE END usart1 */
};
 
 &m4_rproc{
     /*Restriction: "memory-region" property is not managed - please to use User-Section if needed*/
     mboxes = <&ipcc 0>, <&ipcc 1>, <&ipcc 2>;
     mbox-names = "vq0", "vq1", "shutdown";
     status = "okay";
 
     /* USER CODE BEGIN m4_rproc */
     memory-region = <&retram>, <&mcuram>, <&mcuram2>, <&vdev0vring0>,
             <&vdev0vring1>, <&vdev0buffer>;
     mboxes = <&ipcc 0>, <&ipcc 1>, <&ipcc 2>;
     mbox-names = "vq0", "vq1", "shutdown";
     interrupt-parent = <&exti>;
     interrupts = <68 1>;
     wakeup-source;
     status = "okay";
     /* USER CODE END m4_rproc */
 };
 
 &adc{
     pinctrl-names = "default", "sleep";
     pinctrl-0 = <&adc_pins_mx>;
     pinctrl-1 = <&adc_sleep_pins_mx>;
     status = "okay";
 
     /* USER CODE BEGIN adc */
     vdda-supply = <&vdda>;
     vref-supply = <&vrefbuf>;
     adc1: adc@0 {
         #address-cells = <1>;
         #size-cells = <0>;
         status = "okay";
         channel@0 {
             reg = <0>;
             st,min-sample-time-ns = <10000>;
         };
         channel@1 {
             reg = <1>;
             st,min-sample-time-ns = <10000>;
         };
         channel@15 {
             reg = <15>;
             st,min-sample-time-ns = <10000>;
         };
         channel@19 {
             reg = <19>;
             st,min-sample-time-ns = <10000>;
         };
     };
     /* USER CODE END adc */
 };
 
 &bsec{
     status = "okay";
 
     /* USER CODE BEGIN bsec */
     /* USER CODE END bsec */
 };
 
 &dma1{
     status = "okay";
 
     /* USER CODE BEGIN dma1 */
     /* USER CODE END dma1 */
 };
 
 &dma2{
     status = "disabled";
 
     /* USER CODE BEGIN dma2 */
     /* USER CODE END dma2 */
 };
 
 &dmamux1{
     status = "okay";
 
     dma-masters = <&dma1>;
     dma-channels = <8>;
 
     /* USER CODE BEGIN dmamux1 */
     /* USER CODE END dmamux1 */
 };
 
 &ethernet0{
     pinctrl-names = "default", "sleep";
     pinctrl-0 = <&eth1_pins_mx>;
     pinctrl-1 = <&eth1_sleep_pins_mx>;
     status = "okay";
 
     /* USER CODE BEGIN ethernet0 */
     phy-mode = "mii";
     max-speed = <100>;
     fixed-link {
         speed = <100>;
         full-duplex;
     };
                 
     mdio {
         #address-cells = <1>;
         #size-cells = <0>;
         compatible = "snps,dwmac-mdio";
 
         switch: switch-phy@0 {
             compatible = "smsc,lan9303-mdio";
             #address-cells = <1>;
             #size-cells = <0>;
             dsa,member = <0 0>;
             reg = <0>;
             reset-gpios = <&gpiog 3 GPIO_ACTIVE_LOW>;
             reset-duration = <400>;
                         
             ports {
                 #address-cells = <1>;
                 #size-cells = <0>;
 
                 port@0 {
                     reg = <0>;
                     ethernet = <&ethernet0>;
                     phy-mode = "mii";
 
                     fixed-link {
                         speed = <100>;
                         full-duplex;
                     };
                 };
 
                 port@1 {
                     reg = <1>;
                     phy-mode = "internal";
                     phy-handle = <&phy1>;
                     label = "lan1";
                 };
 
                 port@2 {
                     reg = <2>;
                     phy-mode = "internal";
                     phy-handle = <&phy2>;
                     label = "lan2";
                 };
             };
 
             mdio {
                 #address-cells = <1>;
                 #size-cells = <0>;
 
                 phy1: ethernet-phy@2{
                     reg = <0x2>;
                 };
 
                 phy2: ethernet-phy@3{
                     reg = <0x3>;
                 };
             };
         };
     };
     /* USER CODE END ethernet0 */
 };
 
 &fmc{
     pinctrl-names = "default", "sleep";
     pinctrl-0 = <&fmc_pins_mx>;
     pinctrl-1 = <&fmc_sleep_pins_mx>;
     status = "okay";
 
     /* USER CODE BEGIN fmc */
     nand-controller@4,0 {
         status = "okay";
                              
         nand@0 {
             reg = <0>;
             nand-on-flash-bbt;
             nand-ecc-strength = <4>;
             nand-ecc-step-size = <512>;
             #address-cells = <1>;
             #size-cells = <1>;
         };
     }; 
     /* USER CODE END fmc */
 };
 
 &hash1{
     status = "okay";
 
     /* USER CODE BEGIN hash1 */
     /* USER CODE END hash1 */
 };
 
 &hsem{
     status = "okay";
 
     /* USER CODE BEGIN hsem */
     /* USER CODE END hsem */
 };
 
 &i2c4{
     pinctrl-names = "default", "sleep";
     pinctrl-0 = <&i2c4_pins_z_mx>;
     pinctrl-1 = <&i2c4_sleep_pins_z_mx>;
     status = "okay";
 
     /* USER CODE BEGIN i2c4 */
     i2c-scl-rising-time-ns = <185>;
     i2c-scl-falling-time-ns = <20>;
     clock-frequency = <400000>;
     /delete-property/dmas;
     /delete-property/dma-names;
     
     pmic: stpmic@33 {
         compatible = "st,stpmic1";
         reg = <0x33>;
         interrupts-extended = <&exti 55 IRQ_TYPE_EDGE_FALLING>;
         interrupt-controller;
         #interrupt-cells = <2>;
         status = "okay";
 
         regulators {
             compatible = "st,stpmic1-regulators";
             buck1-supply = <&vin>;
             buck2-supply = <&vin>;
             buck3-supply = <&vin>;
             buck4-supply = <&vin>;
             ldo1-supply = <&v3v3>;
             ldo2-supply = <&vin>;
             ldo3-supply = <&vdd_ddr>;
             ldo4-supply = <&vin>;
             ldo5-supply = <&vin>;
             ldo6-supply = <&v3v3>;
             vref_ddr-supply = <&vin>;
             boost-supply = <&vin>;
             pwr_sw1-supply = <&bst_out>;
             pwr_sw2-supply = <&bst_out>;
         
 
             vddcore: buck1 {
                 regulator-name = "vddcore";
                 regulator-min-microvolt = <1200000>;
                 regulator-max-microvolt = <1350000>;
                 regulator-always-on;
                 regulator-initial-mode = <0>;
                 regulator-over-current-protection;
             };
 
             vdd_ddr: buck2 {
                 regulator-name = "vdd_ddr";
                 regulator-min-microvolt = <1350000>;
                 regulator-max-microvolt = <1350000>;
                 regulator-always-on;
                 regulator-initial-mode = <0>;
                 regulator-over-current-protection;
             };
 
             vdd: buck3 {
                 regulator-name = "vdd";
                 regulator-min-microvolt = <3300000>;
                 regulator-max-microvolt = <3300000>;
                 regulator-always-on;
                 st,mask-reset;
                 regulator-initial-mode = <0>;
                 regulator-over-current-protection;
             };
 
             v3v3: buck4 {
                 regulator-name = "v3v3";
                 regulator-min-microvolt = <3300000>;
                 regulator-max-microvolt = <3300000>;
                 regulator-always-on;
                 regulator-over-current-protection;
                 regulator-initial-mode = <0>;
             };
             
             vdda: ldo1 {
                 regulator-name = "vdda";
                 regulator-min-microvolt = <3300000>;
                 regulator-max-microvolt = <3300000>;
                 regulator-always-on;
                 interrupts = <IT_CURLIM_LDO1 0>;
 
             };
 
             v1v8_hdmi: ldo2 {
                 regulator-name = "v1v8_hdmi";
                 regulator-min-microvolt = <1800000>;
                 regulator-max-microvolt = <1800000>;
                 regulator-always-on;
                 interrupts = <IT_CURLIM_LDO2 0>;
 
             };
 
             vtt_ddr: ldo3 {
                 regulator-name = "vtt_ddr";
                 regulator-min-microvolt = <1700000>;
                 regulator-max-microvolt = <3300000>;
                 regulator-always-on;
                 regulator-over-current-protection;
             };
 
             vdd_usb: ldo4 {
                 regulator-name = "vdd_usb";
                 regulator-min-microvolt = <3300000>;
                 regulator-max-microvolt = <3300000>;
                 interrupts = <IT_CURLIM_LDO4 0>;
                 regulator-always-on;
             };
 
             vdd_sd: ldo5 {
                 regulator-name = "vdd_sd";
                 regulator-min-microvolt = <3300000>;
                 regulator-max-microvolt = <3300000>;
                 interrupts = <IT_CURLIM_LDO5 0>;
                 regulator-boot-on;
             };
 
             vref_ddr: vref_ddr {
                 regulator-name = "vref_ddr";
                 regulator-always-on;
                 regulator-over-current-protection;
             };
 
             bst_out: boost {
                 regulator-name = "bst_out";
                 interrupts = <IT_OCP_BOOST 0>;
             };
 
             vbus_otg: pwr_sw1 {
                 regulator-name = "vbus_otg";
                 interrupts = <IT_OCP_OTG 0>;
             };
 
             vbus_sw: pwr_sw2 {
                 regulator-name = "vbus_sw";
                 interrupts = <IT_OCP_SWOUT 0>;
                 regulator-active-discharge = <1>;
             };
         };
 
         onkey {
             compatible = "st,stpmic1-onkey";
             interrupts = <IT_PONKEY_F 0>, <IT_PONKEY_R 0>;
             interrupt-names = "onkey-falling", "onkey-rising";
             power-off-time-sec = <10>;
             status = "okay";
         };
 
         watchdog {
             compatible = "st,stpmic1-wdt";
             status = "disabled";
         };
     };
     /* USER CODE END i2c4 */
 };
 
 &i2c5{
     pinctrl-names = "default", "sleep";
     pinctrl-0 = <&i2c5_pins_mx>;
     pinctrl-1 = <&i2c5_sleep_pins_mx>;
     status = "okay";
 
     /* USER CODE BEGIN i2c5 */
     i2c-scl-rising-time-ns = <185>;
     i2c-scl-falling-time-ns = <20>;
     eeprom@50 {
         compatible = "atmel,24c64";
         pagesize = <8>;
         reg = <0x50>;
         vcc-supply = <&v3v3>;
     };
     /* USER CODE END i2c5 */
 };
 
 &ipcc{
     status = "okay";
 
     /* USER CODE BEGIN ipcc */
     /* USER CODE END ipcc */
 };
 
//  &iwdg1{
//      status = "okay";
 
//      /* USER CODE BEGIN iwdg2 */
//      timeout-sec = <32>;
//      /* USER CODE END iwdg2 */
//  };
 
 &m4_dma2{
     status = "okay";
 
     /* USER CODE BEGIN m4_dma2 */
     /* USER CODE END m4_dma2 */
 };
 
 &mdma1{
     status = "okay";
 
     /* USER CODE BEGIN mdma1 */
     /* USER CODE END mdma1 */
 };
 
 &rcc{
     status = "okay";
 
     /* USER CODE BEGIN rcc */
     /* USER CODE END rcc */
 };
 
 &rtc{
     status = "okay";
 
     /* USER CODE BEGIN rtc */
     /* USER CODE END rtc */
 };
 
 &sdmmc1{
     pinctrl-names = "default", "opendrain", "sleep";
     pinctrl-0 = <&sdmmc1_pins_mx>;
     pinctrl-1 = <&sdmmc1_opendrain_pins_mx>;
     pinctrl-2 = <&sdmmc1_sleep_pins_mx>;
     status = "okay";
 
     /* USER CODE BEGIN sdmmc1 */
     broken-cd;
     st,neg-edge;
     bus-width = <4>;
     vmmc-supply = <&vdd_sd>;
     /* USER CODE END sdmmc1 */
 };
 
 &sdmmc3{
     pinctrl-names = "default", "opendrain", "sleep";
     pinctrl-0 = <&sdmmc3_pins_mx>;
     pinctrl-1 = <&sdmmc3_opendrain_pins_mx>;
     pinctrl-2 = <&sdmmc3_sleep_pins_mx>;
     status = "okay";
 
     /* USER CODE BEGIN sdmmc3 */
     broken-cd;
     st,neg-edge;
     bus-width = <4>;
     vmmc-supply = <&vdd_sd>;
     /* USER CODE END sdmmc3 */
 };
 
 &spi2{
     pinctrl-names = "default", "sleep";
     pinctrl-0 = <&spi2_pins_mx>;
     pinctrl-1 = <&spi2_sleep_pins_mx>;
     status = "okay";
 
     /* USER CODE BEGIN spi2 */
     cs-gpios = <&gpioi 0 GPIO_ACTIVE_LOW>, <&gpioh 8 GPIO_ACTIVE_LOW>;
     can@0 {
         compatible = "microchip,mcp2515";
         reg = <0x0>;
         clocks = <&clk_mcp>;
         interrupt-parent = <&gpioh>;
         interrupts = <9 IRQ_TYPE_LEVEL_LOW>;
         spi-max-frequency = <10000000>;
     };
     /* USER CODE END spi2 */
 };
 
 &spi4{
     pinctrl-names = "default", "sleep";
     pinctrl-0 = <&spi4_pins_mx>;
     pinctrl-1 = <&spi4_sleep_pins_mx>;
     status = "okay";
 
     /* USER CODE BEGIN spi4 */
     cs-gpios = <&gpioe 11 GPIO_ACTIVE_LOW>;
     spidev@1{
         compatible = "rohm,dh2228fv";
         reg = <0>;
         spi-max-frequency = <2000000>;
     };
     /* USER CODE END spi4 */
 };
 
 &spi5{
     pinctrl-names = "default", "sleep";
     pinctrl-0 = <&spi5_pins_mx>;
     pinctrl-1 = <&spi5_sleep_pins_mx>;
     status = "okay";
 
     /* USER CODE BEGIN spi5 */
     cs-gpios = <&gpioh 5 GPIO_ACTIVE_LOW>;
     spidev@2{
         compatible = "rohm,dh2228fv";
         // compatible = "spidev";
         reg = <0>;
         spi-max-frequency = <2000000>;
     };
     /* USER CODE END spi5 */
 };
 
 &tamp{
     status = "okay";
 
     /* USER CODE BEGIN tamp */
     /* USER CODE END tamp */
 };
 
 &timers8{
     status = "okay";
 
     /* USER CODE BEGIN timers8 */
     /delete-property/dmas;
     /delete-property/dma-names;
     /* USER CODE END timers8 */
 
     pwm3: pwm{
         pinctrl-names = "default", "sleep";
         pinctrl-0 = <&tim8_pwm_pins_mx>;
         pinctrl-1 = <&tim8_pwm_sleep_pins_mx>;
         status = "okay";
 
         /* USER CODE BEGIN timers8_pwm */
         /* USER CODE END timers8_pwm */
     };
 };
 
 &usbh_ehci{
     status = "okay";
 
     /* USER CODE BEGIN usbh_ehci */
     phys = <&usbphyc_port0>;
     /* USER CODE END usbh_ehci */
 };
 
 &usbh_ohci{
     status = "okay";
 
     /* USER CODE BEGIN usbh_ohci */
     /* USER CODE END usbh_ohci */
 };
 
 &usbotg_hs{
     status = "okay";
 
     /* USER CODE BEGIN usbotg_hs */
     usb-role-switch;
     role-switch-default-mode = "peripheral"; 
     phys = <&usbphyc_port1 0>;
     phy-names = "usb2-phy";
     status = "okay";
     /* USER CODE END usbotg_hs */
 };
 
 &usbphyc{
     status = "okay";
 
     /* USER CODE BEGIN usbphyc */
     /* USER CODE END usbphyc */
 };
 
 &usbphyc_port0{
     status = "okay";
 
     /* USER CODE BEGIN usbphyc_port0 */
     phy-supply = <&vdd_usb>;
     st,phy-tuning = <&usb_phy_tuning>;
     /* USER CODE END usbphyc_port0 */
 };
 
 &usbphyc_port1{
     status = "okay";
 
     /* USER CODE BEGIN usbphyc_port1 */
     phy-supply = <&vdd_usb>;
     st,phy-tuning = <&usb_phy_tuning>;
     /* USER CODE END usbphyc_port1 */
 };
 
 &vrefbuf{
     status = "okay";
 
     /* USER CODE BEGIN vrefbuf */
     regulator-min-microvolt = <2500000>;
     regulator-max-microvolt = <2500000>;
     vdda-supply = <&vdda>;
     /* USER CODE END vrefbuf */
 };
 
 /* USER CODE BEGIN addons */
 &cpu0 {
     cpu-supply = <&vddcore>;
     clock-frequency = <650000000>;
 };
 
 &pwr_regulators {
     vdd-supply = <&vdd>;
     vdd_3v3_usbfs-supply = <&vdd_usb>;
 };
 /* USER CODE END addons */
 
 